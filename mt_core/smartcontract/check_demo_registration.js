const { ethers } = require("hardhat"); async function main() { const contractAddress = "0xAA6B8200495F7741B0B151B486aEB895fEE8c272"; const demoAddress = "0x9cc8CB3Ce44F5A61beD045E0b15A491d510035e1"; console.log("üîç CHECKING REGISTRATION STATUS"); console.log("==============================="); try { const ModernTensor = await ethers.getContractFactory("ModernTensor"); const contract = ModernTensor.attach(contractAddress); console.log(`üìç Contract: ${contractAddress}`); console.log(`üë§ Demo Address: ${demoAddress}`); console.log(""); console.log("üîç Checking if demo_hotkey is registered..."); const minerInfo = await contract.getMinerInfo(demoAddress); console.log("‚úÖ DEMO_HOTKEY IS REGISTERED!"); console.log("üìä Miner Info:", { uid: minerInfo.uid, subnetUid: minerInfo.subnet_uid.toString(), coreStake: ethers.utils.formatEther(minerInfo.stake), btcStake: ethers.utils.formatEther(minerInfo.bitcoin_stake), performance: minerInfo.scaled_last_performance.toString(), trustScore: minerInfo.scaled_trust_score.toString(), apiEndpoint: minerInfo.api_endpoint, status: minerInfo.status, owner: minerInfo.owner }); } catch (error) { if (error.message.includes("Miner not found") || minerInfo.uid === "0x0000000000000000000000000000000000000000000000000000000000000000") { console.log("‚ùå DEMO_HOTKEY NOT REGISTERED"); console.log("Need to register first"); } else { console.log("‚ö†Ô∏è  Error:", error.message); } } } main().catch(console.error);
