#!/usr/bin/env python3
"""
ValidatorNode - Full Node Implementation

This module provides a complete validator node implementation for the ModernTensor
decentralized AI training platform on Core blockchain.

Main Features:
- Complete consensus cycle management
- Slot-based coordination for synchronized operations
- Miner task assignment and scoring
- Validator coordination and cross-validation
- Blockchain state management and updates
- Performance monitoring and health checks
- API server for peer communication

The ValidatorNode integrates all components:
- ValidatorNodeCore (state management)
- ValidatorNodeConsensus (consensus logic)
- ValidatorNodeNetwork (P2P communication)
- SlotCoordinator (synchronization)
- Health monitoring and metrics
"""

import asyncio
import logging
import time
from typing import Dict, List, Optional, Any

# Updated imports for Core blockchain
from web3 import Web3
from eth_account import Account
from eth_account.signers.local import LocalAccount

# Updated for Core blockchain - removed Aptos imports

from ..config.config_loader import get_config
from ..core.datatypes import ValidatorInfo, MinerInfo

from ..monitoring.health import start_health_server, start_health_server_async

from ..network.app.main import app

from ..network.schemas import RegisterValidatorRequest, RegisterMinerRequest

from ..metagraph.hash.hash_datum import hash_data
from ..utils.logger import logger

# Import validator node components
from .validator_node_core import ValidatorNodeCore
from .validator_node_consensus import ValidatorNodeConsensus
from .validator_node_network import ValidatorNodeNetwork
from .slot_coordinator import SlotCoordinator, SlotPhase, SlotConfig

# Import the modular ValidatorNode implementation
from .validator_node_refactored import ValidatorNode, create_validator_node

# Import modules for advanced usage
from .validator_node_tasks import ValidatorNodeTasks

# Import commonly used types for compatibility
from ..core.datatypes import (
    ValidatorScore,
    CycleConsensusResults,
    MinerConsensusResult,
)


# Legacy function aliases for backward compatibility
async def run_validator_node():
    """
    Legacy function for running validator node - preserved for compatibility.

    This function maintains backward compatibility for existing code that calls
    run_validator_node(). New code should use the modular ValidatorNode directly.
    """
    from .validator_node_refactored import example_usage

    await example_usage()


async def _create_legacy_validator(
    validator_name: str,
    consensus_mode: str = "continuous",
    batch_wait_time: float = 30.0,
    auto_password: str = "default123",
):
    """
    Helper function to create validator with auto-configuration for legacy support.
    """
    import os
    from pathlib import Path
    from ..core.datatypes import ValidatorInfo

    # Create auto account or load existing
    keystore_dir = Path("wallets")
    keystore_dir.mkdir(exist_ok=True)

    account_file = keystore_dir / f"{validator_name}_account.json"

    if account_file.exists():
        # Load existing account
        import json

        with open(account_file, "r") as f:
            account_data = json.load(f)
        account = Account.load_key(account_data["private_key"])
    else:
        # Create new account
        account = Account.generate()
        # Save account
        import json

        with open(account_file, "w") as f:
            json.dump(
                {
                    "private_key": account.private_key.hex(),
                    "public_key": account.public_key.hex(),
                    "address": str(account.address()),
                },
                f,
                indent=2,
            )

    # Create validator info
    validator_info = ValidatorInfo(
        uid=f"{validator_name}_{str(account.address())[:8]}",
        address=str(account.address()),
        api_endpoint=f"http://localhost:{8000 + hash(validator_name) % 1000}",
        trust_score=0.8,
        stake=1000.0,
        weight=1.0,
    )

    # Create validator with modular architecture
    config = get_config()
    return create_validator_node(
        validator_info=validator_info,
        account=account,
        contract_address=getattr(config.blockchain, "contract_address", "0x1"),
        consensus_mode=consensus_mode,
        batch_wait_time=batch_wait_time,
        state_file=f"{validator_name}_state.json",
    )


async def create_and_run_validator_sequential(
    validator_name: str = "validator",
    batch_wait_time: float = 30.0,
    auto_password: str = "default123",
):
    """
    Legacy function for sequential validator - now implemented with modular architecture.

    Args:
        validator_name: Name of the validator
        batch_wait_time: Wait time between batches
        auto_password: Password for account creation
    """
    import logging
    import asyncio

    logger = logging.getLogger(__name__)
    logger.info(f"üöÄ Starting {validator_name} with Sequential Consensus Mode")
    logger.info(f"üìä Batch Wait Time: {batch_wait_time}s")

    try:
        # Create validator with auto-configuration
        validator = await _create_legacy_validator(
            validator_name=validator_name,
            consensus_mode="sequential",
            batch_wait_time=batch_wait_time,
            auto_password=auto_password,
        )

        async with validator:
            logger.info(
                f"‚úÖ {validator_name} started successfully with modular architecture"
            )

            # Run until interrupted
            try:
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                logger.info(f"üëã {validator_name} stopped by user")

    except Exception as e:
        logger.error(f"‚ùå {validator_name} error: {e}")
        raise


async def create_and_run_validator_continuous(
    validator_name: str = "validator", auto_password: str = "default123"
):
    """
    Legacy function for continuous validator - now implemented with modular architecture.

    Args:
        validator_name: Name of the validator
        auto_password: Password for account creation
    """
    import logging
    import asyncio

    logger = logging.getLogger(__name__)
    logger.info(f"üöÄ Starting {validator_name} with Continuous Consensus Mode")

    try:
        # Create validator with auto-configuration
        validator = await _create_legacy_validator(
            validator_name=validator_name,
            consensus_mode="continuous",
            auto_password=auto_password,
        )

        async with validator:
            logger.info(
                f"‚úÖ {validator_name} started successfully with modular architecture"
            )

            # Run until interrupted
            try:
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                logger.info(f"üëã {validator_name} stopped by user")

    except Exception as e:
        logger.error(f"‚ùå {validator_name} error: {e}")
        raise


# Additional utility imports for compatibility
async def decode_history_from_hash(hash_str):
    """Mock function for history decoding (to be implemented later)"""
    import asyncio

    await asyncio.sleep(0)
    return []


# Export all public classes and functions for easy importing
__all__ = [
    # Main validator classes
    "ValidatorNode",
    "create_validator_node",
    # Modular components
    "ValidatorNodeCore",
    "ValidatorNodeTasks",
    "ValidatorNodeConsensus",
    "ValidatorNodeNetwork",
    # Data types
    "ValidatorInfo",
    "MinerInfo",
    "ValidatorScore",
    "CycleConsensusResults",
    "MinerConsensusResult",
    # Slot coordination
    "SlotCoordinator",
    "SlotPhase",
    "SlotConfig",
    # Legacy functions
    "run_validator_node",
    "create_and_run_validator_sequential",
    "create_and_run_validator_continuous",
    "decode_history_from_hash",
]


# Fallback function for health server
def start_health_server(*args, **kwargs):
    """Fallback health server function"""
    pass


# Fallback classes
class RegisterValidatorRequest:
    pass


class RegisterMinerRequest:
    pass
